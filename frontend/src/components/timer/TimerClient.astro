---
import FormTimer from "./form-timer.astro";
import { Icon } from "astro-icon/components";
---

<section class="font-[work-sans] flex items-center flex-col gap-4 h-full">
  <div class="flex w-full justify-center gap-2 mb-4 md:justify-between">
    <h1 id="timer-title" class="text-3xl text-[28px] font-bold">
      Pomodoro Timer
    </h1>
    <button
      id="caret-down"
      class="transition-transform duration-300 cursor-pointer"
    >
      <div
        class="flex items-center justify-center hover:bg-gray-300 hover:animate-squeeze py-1 px-0.5 rounded-lg"
      >
        <Icon name="gear" class="size-5" />
        <Icon id="iconMenu" name="arrow-down" class="size-6" />
      </div>
    </button>
  </div>
  <FormTimer />
  <h2 id="session-title" class="text-[#171212] font-medium text-base">
    Select a session to begin
  </h2>
  <div
    id="timer-circle"
    class="flex items-center justify-center border-2 rounded-full size-45"
  >
    <p id="timer-countdown" class="text-4xl font-medium">25:00</p>
  </div>
  <div id="timer-controls" class="flex items-center gap-4 lg:mt-2.5">
    <button
      id="btn-start"
      class="cursor-pointer w-[120px] h-[49px] border-1 p-3 rounded-xl bg-[#171212] hover:animate-squeeze text-[#FFFEFE] font-bold text-lg flex items-center shadow-xl"
    >
      <Icon id="icon-play" name="play" class="text-white size-10" />
      <Icon id="icon-pause" name="pause" class="text-white size-7 hidden" />
      <p id="btn-text">Start</p>
    </button>
    <button
      id="btn-reset"
      class="cursor-pointer border-1 border-[#C6C2C2] p-3 rounded-xl hover:animate-squeeze shadow-xl"
    >
      <Icon id="icon-reset" name="reset" class="text-white size-6" />
    </button>
  </div>
</section>

<script type="module">
  import { editTask } from "/scripts/tasksApi.js";
  import { registerSession } from "/scripts/timerApi.js";

  // === Audio de alarma ===
  const alarm = new Audio("/sounds/alarm2.mp3"); // ruta desde /public
  alarm.preload = "auto";
  alarm.volume = 0.7;
  alarm.loop = false; // o true si quieres que suene en bucle
  let alarmUnlocked = false;

  const timerTitle = document.getElementById("timer-title");
  const timerCountdown = document.getElementById("timer-countdown");
  const sessionTitle = document.getElementById("session-title");
  const btnStart = document.getElementById("btn-start");
  const btnReset = document.getElementById("btn-reset");
  const btnText = document.getElementById("btn-text");
  const iconPlay = document.getElementById("icon-play");
  const iconPause = document.getElementById("icon-pause");

  const btnPomodoro = document.getElementById("btn-pomodoro");
  const btnShortBreak = document.getElementById("btn-short-break");
  const btnLongBreak = document.getElementById("btn-long-break");

  // NOTA: Duraciones cortas para facilitar las pruebas de desarrollo.
  const DURATIONS = {
    //work: 25 * 60,
    work: 1500, // 5 segundos(probando)
    //short_break: 5 * 60,
    short_break: 300, // 3 segundos(probando)
    //long_break: 15 * 60,
    long_break: 900, // 4 segundos(probando)
  };

  let currentSessionType = "work";
  let totalSeconds = DURATIONS.work;
  let nIntervId = null;
  let isPaused = true;

  function updateDisplayTimer(seconds) {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    timerCountdown.textContent = `${minutes.toString().padStart(2, "0")}:${remainingSeconds.toString().padStart(2, "0")}`;
  }

  function setTimer(sessionType) {
    // Detener alarma si está sonando
    try {
      alarm.pause();
      alarm.currentTime = 0;
    } catch {}

    clearInterval(nIntervId);
    nIntervId = null;
    isPaused = true;
    currentSessionType = sessionType;
    totalSeconds = DURATIONS[sessionType];

    const title = sessionType
      .replace("_", " ")
      .replace(/\b\w/g, (l) => l.toUpperCase());
    timerTitle.textContent = title;
    updateDisplayTimer(totalSeconds);
    btnText.textContent = "Start";
    iconPlay.classList.remove("hidden");
    iconPause.classList.add("hidden");
  }

  async function handleTimerEnd() {
    clearInterval(nIntervId);
    nIntervId = null;
    isPaused = true;

    // Reproducir alarma
    try {
      alarm.currentTime = 0;
      await alarm.play();
    } catch (error) {
      console.warn("No se pudo reproducir la alarma:", error);
    }

    // Al finalizar el temporizador, se registra la sesión en el backend.
    const sessionData = {
      sessionType: currentSessionType,
      duration: DURATIONS[currentSessionType],
      userId: localStorage.getItem("userId"), // Se envía el ID del usuario.
    };

    const { success, error } = await registerSession(sessionData);

    if (success) {
      // Si la sesión se registra con éxito, se dispara un evento para actualizar las estadísticas.
      document.dispatchEvent(new CustomEvent("stats-updated"));
      alert(`${timerTitle.textContent} finished!`);
    } else {
      console.error("Error registering session:", error);
      alert(`Error: Could not save session. Reason: ${error}`);
    }

    setTimer(currentSessionType);
  }

  function startTimer() {
    if (nIntervId) return;

    nIntervId = setInterval(() => {
      if (totalSeconds <= 0) {
        handleTimerEnd();
        return;
      }
      totalSeconds--;
      updateDisplayTimer(totalSeconds);
    }, 1000);
  }

  function togglePomodoro() {
    const statusInProgress = "in_progress";
    const { id, status } = sessionTitle.dataset;
    if (status !== statusInProgress) {
      sessionTitle.dataset.status = statusInProgress;
      editTask(id, { status: statusInProgress }).then(({ success }) => {
        if (success) {
          // Update li element
          const task = document.querySelector(`li[data-id="${id}"]`);
          task.dataset.status = statusInProgress;
        }
      });
    }

    isPaused = !isPaused;
    if (!isPaused) {
      // Desbloquear audio en primer click
      if (!alarmUnlocked) {
        alarm
          .play()
          .then(() => {
            alarm.pause();
            alarm.currentTime = 0;
            alarmUnlocked = true;
          })
          .catch(() => {});
      }
      startTimer();
      btnText.textContent = "Pause";
    } else {
      clearInterval(nIntervId);
      nIntervId = null;
      btnText.textContent = "Start";
    }
    iconPlay.classList.toggle("hidden");
    iconPause.classList.toggle("hidden");
  }

  // Event Listeners
  btnStart.addEventListener("click", togglePomodoro);
  btnReset.addEventListener("click", () => setTimer(currentSessionType));
  // Escuchar evento desde TaskList (evento emitido por createTask)
  document.addEventListener("task:selected", (e) => {
    const { id, nombre, status } = e.detail;

    // Cambiar el texto del título de sesión
    if (sessionTitle) {
      sessionTitle.textContent = nombre;
      sessionTitle.dataset.id = id;
      sessionTitle.dataset.status = status;
    }

    // Reiniciar estado del botón
    isPaused = true;
    clearInterval(nIntervId);
    nIntervId = null;
    btnText.textContent = "Start";
    iconPlay.classList.remove("hidden");
    iconPause.classList.add("hidden");
  });

  btnPomodoro.addEventListener("click", () => setTimer("work"));
  btnShortBreak.addEventListener("click", () => setTimer("short_break"));
  btnLongBreak.addEventListener("click", () => setTimer("long_break"));

  // Initial state
  setTimer("work");
</script>
